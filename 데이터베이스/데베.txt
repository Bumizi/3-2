=ER관계모델=
엔티티 타입->릴레이션 (엔티티 타입의 키 중 하나를 릴레이션의 기본 키로 지정)
약한 엔티티 타입는 소유 릴레이션의 키 속성을 포함(소유 릴레이션의 키와 약한 엔티티 타입의 부분키를 합쳐 기본 키로 설정)
1:1 관계는 둘 중 하나가 나머지 한쪽의 키를 외래키로 보유 / 1:N 관계는 N쪽이 1쪽의 키를 외래키로 보유
N:M 관계는 별도의 릴레이션을 만들어 양쪽 모두의 키를 외래키로 보유
복합 애트리뷰트의 경우 하위 원소들을 다 넣어준다
다치 애트리뷰트는 다치를 제외한 나머지 애트리뷰트들로 릴레이션을 하나 만들고, 
다치+원래 엔티티의 키 애트리뷰트를 합쳐 릴레이션을 만든다.

=관계데이터모델=
릴레이션(투플의 집합)-투플(애트리뷰트의 나열)-애트리뷰트
관계제약조건(도메인, 키, 엔티티무결성, 참조무결성)
도메인 제약조건 : 애트리뷰트 A의 값은 A의 도메인에 속하는 원자값이어야 한다.
키 제약조건 : 한 릴레이션에는 최소 하나의 키가 존재해야 하며, 애트리뷰트에 중복된 값이 존재해서는 안된다.
엔티티무결성 제약조건 : 릴레이션의 기본키에는 NULL값이 올 수 없다.
참조무결성 제약조건 : 외래키는 NULL이거나, 참조되는 릴레이션에 키값으로 존재해야한다.
외래키는 동일한 릴레이션의 애트리뷰트를 참조할 수도 있다.
삽입할 때는 도메인,키,엔티티무결성,참조무결성 다 검사해봐야한다(도메인에 속하는지, 중복된 값인지, NULL인지, 외래키가
참조되는 릴레이션의 키값으로 존재하는지)
삭제할 때는 참조무결성을 검사해봐야한다(지우는 투플이 다른 테이블에서 참조하고 있으면 안됨)
갱신할 때는 삭제 후 삽입과 같으므로 두 경우 모두 살펴봐야함

=관계대수=
관계해석 : 원하는 데이터만 명시하고 질의 수행에 대한 것은 명시하지 않은 선언적 언어
관계대수 : 절차적 언어(관계해석보다 비교적! 절차적이라는거지 선언적 언어인건 맞음)
필수 연산자 : 실렉션, 프로젝션, 합집합, 차집합, 카티션 곱 (완전 집합, 관계적으로 완전함)
유도 연산자 : 교집합, 세타 조인, 동등 조인, 자연 조인, 세미 조인, 디비전
중간 단계의 임시 릴레이션에 이름을 부여할 수도, 결과 릴레이션의 애트리뷰트 이름을 재명명할 수도 있다
합집합 호환성 : 합집합, 교집합, 차집합 등 집합연산에서, 스키마가 동일한 두 릴레이션에 대해서만 집합연산이 가능하다
카테시안 곱 : R1=(A1,A2,A3...Am), R2=(B1,B2,B3...Bn)이라면, R(R1XR2)=(A1,A2,A3...Am,B1,B2,B3...Bn)
즉, R1이 n개의 투플을, R2가 m개의 투플을 가지면 R은 nxm개의 투플을 가짐
조인 : 두 릴레이션으로부터 관련있는 투플을 결합해 하나의 투플로 생성

=정규화=
데이터 중복의 문제점
1) 갱신 이상(수정 이상=반복 데이터 중 일부만 수정, 삽입 이상=필요 정보 저장을 위해 불필요한 정보까지 함께 저장,
삭제 이상=불필요한 정보 삭제시 유용한 정보까지 같이 삭제)
2) NULL(저장공간 낭비, 애트리뷰트, 조인연산, 집단함수의 의미 모호)
그룹화를 통해 NULL값을 최대한 피하기 위해 릴레이션을 분해할 수 있는데, 원래 릴레이션으로 복구가 불가능할 수 있다.
이때 복구가 가능하도록 만드는게 무손실 분해(정보의 손실 개념은 원래 정보보다 적은것 뿐만 아니라 많은 것도 포함)

=트랜잭션=
트랜잭션의 ACID특성
원자성(Atomicity) : 모두 수행되거나 혹은 전혀 수행되지 않거나 (all done, none done)
일관성(Consistency) : 어떤 트랜잭션이 수행되기 전에 DB가 일관된 상태였다면, 트랜잭션 수행 후에도 일관된 상태를 가짐
고립성(Isolation) : 여러 트랜잭션이 동시에 수행되더라도 혼자 수행한 것과 같아야 함
(직렬 가능성 : 다수의 트랜잭션들이 동시에 수행되어도 그 결과가 트랜잭션들을 순서대로 하나씩 처리한 것과 같아야함)
지속성(Durability) : 트랜잭션이 완료되면 무슨 일이 있어도 결과를 유지
Commit : 완료(성공적 종료), Rollback : 철회(비성공적 종료)
직렬 스케쥴 : 여러 트랜잭션들의 집합을 한번에 하나씩 수행 / 비직렬 스케쥴 : 여러 트랜잭션들을 동시에 수행
직렬가능(성) : 비직렬 스케쥴의 결과가 직렬 스케쥴의 결과와 동등한 것
동시성 제어 오류(갱신 손실=갱신 내용이 덮어씌워져 무효가 됨, 오손 데이터 읽기, 반복할 수 없는 읽기=두번읽을때 그 값이 서로 다름)
고립화 수준이 높아질 수록 데이터가 정확해지지만 동시성이 저하됨, 반대로 낮아질수록 동시성이 높아지지만 데이터 정확성이 떨어짐
